// Code generated by MockGen. DO NOT EDIT.
// Source: unmarshall.go

// Package main is a generated GoMock package.
package main

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUnmarshaller is a mock of Unmarshaller interface.
type MockUnmarshaller struct {
	ctrl     *gomock.Controller
	recorder *MockUnmarshallerMockRecorder
}

// MockUnmarshallerMockRecorder is the mock recorder for MockUnmarshaller.
type MockUnmarshallerMockRecorder struct {
	mock *MockUnmarshaller
}

// NewMockUnmarshaller creates a new mock instance.
func NewMockUnmarshaller(ctrl *gomock.Controller) *MockUnmarshaller {
	mock := &MockUnmarshaller{ctrl: ctrl}
	mock.recorder = &MockUnmarshallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnmarshaller) EXPECT() *MockUnmarshallerMockRecorder {
	return m.recorder
}

// unmarshall mocks base method.
func (m *MockUnmarshaller) unmarshall(httpRequest *http.Request) (*AppRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "unmarshall", httpRequest)
	ret0, _ := ret[0].(*AppRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// unmarshall indicates an expected call of unmarshall.
func (mr *MockUnmarshallerMockRecorder) unmarshall(httpRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unmarshall", reflect.TypeOf((*MockUnmarshaller)(nil).unmarshall), httpRequest)
}
